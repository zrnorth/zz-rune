var fs = require('fs');
var request = require('request');

// The call we care about.
var getMatchHistoryBySummonerId = function(region, id, champId, callback) {
    var path = "/v2.2/matchhistory/" + id + "?championIds=" + champId + "&";
    apiWrapper(region, path, callback);
}

var apiWrapper = function(region, path, callback) {
    // Pls don't use my key <3
    var key = '734c49ac-b2f3-4edf-a2cd-34d29a346662';
    var endpoint = "https://" + region + ".api.pvp.net/api/lol/" +
                    region + path + "api_key=" + key;
    makeRequest(endpoint, callback);
}

// Stupid utility function because IE doesn't work with all the simple ways.
var isEmptyObject = function(obj) {
    var name;
    for (name in obj) {
        return false;
    }
    return true;
}

var makeRequest = function(endpoint, callback) {
    request.get(endpoint, function(err, res, body) {
        if (err) {
            callback(err);
        }
        else if (res.statusCode === 200) {
            try {
                callback(null, JSON.parse(body));
            }
            catch(e) {
                callback(e + ": " + endpoint);
            }
        }
        else {
            callback(res.statusCode + " generated by call: " + endpoint);
        }
    });
}

// Helps for loading data from JSONs synchronously
var loadJSON = function(filename) {
    var data = fs.readFileSync(filename);
    return JSON.parse(data);
}

// Given an input list, gets a random subset of this list with num values.
var getRandomSubset = function(inputList, num) {
    if (num <= 0) return null;
    var output = [];

    for (var i = 0; i < num; i++) {
        var index = Math.floor(Math.random() * inputList.length);
        var item = inputList[index];
        output.push(item);
        inputList.splice(index, 1); // prevent duplicates
    }
    return output;
}

// Data loaders, useful to abstract these away
var getProList = function(num) {
    var inputList = loadJSON("pros.js");
    return getRandomSubset(inputList, num)
}

var getChampId = function(champName) {
    var champData = loadJSON("champ_info.js");
    for (var i = 0; i < champData.length; i++) {
        if (champData[i].name === champName) {
            return champData[i].id;
        }
    }
    return null;
}

// Given a champion, returns a list of recently used rune pages (if enough
// info is available), each a list of Rune objects.
var getAggregatedChampInfo = function(champName) {
    var champId = getChampId(champName);
    var pros = getProList(1);
    var runes = [];
    for (var i = 0; i < pros.length; i++) {
        var id = pros[i];
        getMatchHistoryBySummonerId('na', id, champId, function(err, data) {
            if (err) {
                console.log(err);
            }
            else if (isEmptyObject(data)) {
                console.log("No games found for " + champName);
            }
            else {
                for (var m = 0; m < data.matches.length; m++) {
                    var match = data.matches[m];
                    
                    // Sometimes match doesn't contain rune data...
                    if (match.participants[0].runes !== undefined) {
                        runes.push(match.participants[0].runes);
                    }
                }
            }
            console.log(runes);
        });
    }
}

getAggregatedChampInfo("Ryze");
